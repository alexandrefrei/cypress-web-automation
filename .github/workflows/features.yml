name: Feature mode
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select the environment to run the tests: dev / stage / prod'
        required: true
        default: 'stage'
      browser:
        description: 'Select the  browser to run the tests: chrome / firefox'
        required: true
        default: 'chrome'
      specs:
        description: 'Add the spec file path that you want to run:'
        default: 'cypress/e2e/*.spec.ts'
        required: true
jobs:
  feature-job:
    name: Running tests on feature mode
    # Setting the OS to run the cypress tests
    runs-on: ubuntu-latest
    # Setting the Docker container
    #container:
    # image: cypress/included:12.3.0
    #
    steps:
      #
      - name: Checkout
        uses: actions/checkout@v3
      #
      - name: Get current date
        id: date
        run: |
          echo "date=$(date +'%Y-%m-%d %H-%M')" >> $GITHUB_OUTPUT

      # - name: Conditional to run on STAGE - Copy data from Secrets to cypress.${{github.event.inputs.environment}}.json
      #   if: github.event.inputs.environment == 'stage'
      #   run: |
      #     echo '${{ secrets.CYPRESS_ENV_STAGE }}' > env/cypress.${{github.event.inputs.environment}}.json

      # - name: Conditional to run on PROD - Copy data from Secrets to cypress.env.json
      #   if: github.event.inputs.environment == 'prod'
      #   run:
      #     echo "RUNNING PROD"

      - name: Cypress run ðŸ§ª
        uses: cypress-io/github-action@v5
        with:
          command: npx cypress run --browser ${{github.event.inputs.browser}} --env configFile=${{github.event.inputs.environment}} --spec ${{github.event.inputs.specs}}

      - name: Upload screenshot
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: 'cypress-screenshot-${{ steps.date.outputs.date }}'
          path: cypress/screenshots

      - name: Upload HTML Test Report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: 'cypress-test-report-${{ steps.date.outputs.date }}'
          path: cypress/reports/index.html

      - name: Create Test Summary
        uses: test-summary/action@v2
        if: always()
        with:
          paths: cypress/reports/junit/**/*.xml

      - name: Get test failure information from Cypress report
        id: set_var
        if: always()
        run: |
          content=`cat /home/runner/work/cypress-web-automation/cypress-web-automation/cypress/reports/mochawesome/mochawesome.json`
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          echo "content"
          echo "packageJson=$(content)" >> $GITHUB_OUTPUT
         
      - name: Reading Cypress Report from JSON file
        if: always()
        run: |
          echo "Cypress Report JSON file: ${{steps.set_var.outputs.packageJson}}"
          echo "Number of Cypress tests run: ${{fromJson(steps.set_var.outputs.packageJson).stats.tests}}"
          echo "Number of failed Cypress tests: ${{fromJson(steps.set_var.outputs.packageJson).stats.failures}}"
          echo "Number of passed Cypress tests: ${{fromJson(steps.set_var.outputs.packageJson).stats.passes}}"
          echo "See results at: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "GitHub Action build result: ${{ job.status }}"


      #echo "${{steps.set_var.outputs.packageJson}}"
      #echo "::set-output name=packageJson::$content"
      #echo "packageJson={content}" >> $GITHUB_OUTPUT
      
      - name: Slack Notification
        id: slack
        uses: slackapi/slack-github-action@v1.22.0
        #if: failure()
        with:
          channel-id: 'C04J1G54BPU'
          payload: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "Cypress Workflow: Feature Job :rocket:",
                    "emoji": true
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": ":calendar: *Executed Date*: ${{ steps.date.outputs.date }}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*:test_tube: Executed tests:* ${{fromJson(steps.set_var.outputs.packageJson).stats.tests}}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*:X: Failed Tests:* ${{fromJson(steps.set_var.outputs.packageJson).stats.failures}}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*:white_check_mark: Passed Tests:* ${{fromJson(steps.set_var.outputs.packageJson).stats.passes}}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "* Job Status:* ${{ job.status }}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "See results at:"
                  },
                  "accessory": {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "Gitub Job :bug:",
                      "emoji": true
                    },
                    "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                    "action_id": "button-action"
                  }
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
     
      ##- name: Git ID
      ##if: always()
      ##run: |
      #echo 'JOB LINK: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'
      #'JOB NAME: ${{ github.run_name }}
      #'NAME: ${{ inputs.run_name }}
      #'JOB: ${{ github.action.name }}
      #'BRANCH NAME: ${{ github.ref_name }}
      #'JOB STATUS: ${{ job.status }}
      #'JOB ENV: ${{github.event.inputs.environment}}
      #'RUNNER NAME': ${{ runner.name }}

      #- name: Cypress run
      #uses: cypress-io/github-action@v5
      #with:
      # command: npx cypress run --browser ${{github.event.inputs.browser}} --env configFile=${{github.event.inputs.environment}} --spec ${{github.event.inputs.specs}}
      #
