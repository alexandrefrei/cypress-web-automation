name: Feature mode

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select the environment to run the tests: dev / stage / prod'
        required: true
        default: 'stage'
      browser:
        description: 'Select the  browser to run the tests: chrome / firefox'
        required: true
        default: 'chrome'
      specs:
        description: 'Add the spec file path that you want to run:'
        default: 'cypress/e2e/*.spec.ts'
        required: true
jobs:
  feature-job:
    name: Running tests on feature mode
    # Setting the OS to run the cypress tests
    runs-on: ubuntu-latest
    timeout-minutes: 1
    # Setting the Docker container
    #container:
    # image: cypress/included:12.3.0
    #
    steps:
      #
      - name: Checkout
        uses: actions/checkout@v4
      #
      - name: Get current date #When using $GITHUB_OUTPUT we need to have a job id, here we have id:date
        id: date
        run: |
          echo "date=$(date +'%Y-%m-%d %H-%M')" >> $GITHUB_OUTPUT

      - name: Conditional to run on STAGE - Copy data from Secrets to cypress.${{github.event.inputs.environment}}.json
        if: github.event.inputs.environment == 'stage'
        run: |
          echo '${{ secrets.CYPRESS_ENV_STAGE }}' > env/cypress.${{github.event.inputs.environment}}.json

      - name: Second Test
        if: ${{github.event.inputs.environment}} == 'stage'
        run: |
          echo 'Second teste'

      - name: Thrid Test
        if: ${{github.event.inputs.environment == 'stage'}}
        run: |
          echo 'Thrid Test'

      - name: Conditional to run on PROD - Copy data from Secrets to cypress.env.json
        if: github.event.inputs.environment == 'prod'
        run: echo "RUNNING PROD"

      - name: Cypress run ðŸ§ª
        uses: cypress-io/github-action@v5
        with:
          command: npx cypress run --browser ${{github.event.inputs.browser}} --env configFile=${{github.event.inputs.environment}} --spec ${{github.event.inputs.specs}}
      #
      - name: Create Test Summary
        id: test_summary
        uses: test-summary/action@v2.1
        if: always()
        with:
          paths: cypress/reports/junit/**/*.xml
      #
      - name: Upload HTML test report #Uploading the mocha HTML report that is on index.html with the specific name cypress-test-report-2021-08-12, if no file found error
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: 'cypress-test-report-${{ steps.date.outputs.date }}'
          path: cypress/reports/index.html
          if-no-files-found: 'error'
      #
      - name: Reading JSON Mochawesome Report
        id: mocha_report
        run: |
          echo "json_file=$(jq -c . < /home/runner/work/cypress-web-automation/cypress-web-automation/cypress/reports/index.json)" >> $GITHUB_OUTPUT
      #
      - name: Collecting data
        id: data
        run: |
          echo "EXECUTION_DATE=$((${{fromJson(steps.date.outputs.date)}}))" >> $GITHUB_ENV
          echo "EXECUTION_TIME=$((${{fromJson(steps.mocha_report.outputs.json_file).stats.duration}} / 1000))" >> $GITHUB_ENV
          echo "SUITES=${{ fromJson(steps.mocha_report.outputs.json_file).stats.suites}}" >> $GITHUB_ENV
          echo "EXECUTED_TESTS=${{ fromJson(steps.mocha_report.outputs.json_file).stats.tests}}" >> $GITHUB_ENV
          echo "PASS=${{fromJson(steps.mocha_report.outputs.json_file).stats.passes}}">> $GITHUB_ENV
          echo "FAIL=${{fromJson(steps.mocha_report.outputs.json_file).stats.failues}}" >> $GITHUB_ENV
          echo "PASS_PERCENTAGE=${{fromJson(steps.mocha_report.outputs.json_file).stats.passPercent}}" >> $GITHUB_ENV
          echo "FAIL_PERCENTAGE=$((100 - ${{fromJson(steps.mocha_report.outputs.json_file).stats.passPercent}}))" >> $GITHUB_ENV
      #
      - name: Adding markdown
        run: |
          echo "### Test Report! :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "Number of Suites: ${{ steps.test_summary.outputs.passed }}" >> $GITHUB_STEP_SUMMARY
          echo "Execution time: $EXECUTION_TIME seconds" >> $GITHUB_STEP_SUMMARY
          echo "SUITES: $SUITES" >> $GITHUB_STEP_SUMMARY
          echo "PASSED: ${{ steps.data.outputs.PASS }}" >> $GITHUB_STEP_SUMMARY
      #

#      - name: Slack Notification
#        id: slack
#        uses: slackapi/slack-github-action@v1.23.0
#        if: always()
#        with:
#            channel-id: '34234'
#            payload: |
#              {
#                "text": "GitHub Action",
#                "blocks": [
#                  {
#                    "type": "header",
#                    "text": {
#                      "type": "plain_text",
#                      "text": "Cypress Workflow: Feature Job :rocket:",
#                      "emoji": true
#                    }
#                  },
#                  {
#                    "type": "divider"
#                  },
#                  {
#                    "type": "section",
#                    "fields": [
#                      {
#                        "type": "mrkdwn",
#                        "text": ":calendar: *Executed Date:* ${{ steps.date.outputs.date }}"
#                      }
#                    ]
#                  },
#                  {
#                    "type": "section",
#                    "fields": [
#                      {
#                        "type": "mrkdwn",
#                        "text": ":stopwatch: *Total Execution Time:* ${{ env.EXECUTION_TIME }}"
#                      }
#                    ]
#                  },
#                  {
#                    "type": "section",
#                    "fields": [
#                      {
#                        "type": "mrkdwn",
#                        "text": ":bar_chart: *Number of Suites:* ${{fromJson(steps.set_var.outputs.packageJson).stats.suites}}"
#                      },
#                      {
#                        "type": "mrkdwn",
#                        "text": ":test_tube: *Executed tests:* ${{fromJson(steps.set_var.outputs.packageJson).stats.tests}}"
#                      }
#                    ]
#                  },
#                  {
#                    "type": "section",
#                    "fields": [
#                      {
#                        "type": "mrkdwn",
#                        "text": ":white_check_mark: *Passed Tests:* ${{fromJson(steps.set_var.outputs.packageJson).stats.passes}}"
#                      },
#                      {
#                        "type": "mrkdwn",
#                        "text": ":X: *Failed Tests:* ${{fromJson(steps.set_var.outputs.packageJson).stats.failures}}"
#                      }
#                    ]
#                  },
#                  {
#                    "type": "section",
#                    "text": {
#                      "type": "mrkdwn",
#                      "text": "See results at:"
#                    },
#                    "accessory": {
#                      "type": "button",
#                      "text": {
#                        "type": "plain_text",
#                        "text": "Gitub Job :bug:",
#                        "emoji": true
#                      },
#                      "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
#                      "action_id": "button-action"
#                    }
#                  }
#                ]
#              }
#          env:
#            SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
